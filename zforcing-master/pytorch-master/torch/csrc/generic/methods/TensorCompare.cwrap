[[
  name: lt
  return: argument 0
  options:
    - cname: ltValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - real value
    - cname: ltTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - THTensor* other
]]

[[
  name: lt_
  return: self
  options:
    - cname: ltValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real value
    - cname: ltTensorT
      arguments:
        - THTensor* self
        - THTensor* self
        - THTensor* other
]]

[[
  name: lt
  only_stateless: True
  return: argument 0
  options:
    - cname: ltValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: ltTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
    - cname: ltValueT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: ltTensorT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
]]


[[
  name: gt
  return: argument 0
  options:
    - cname: gtValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - real value
    - cname: gtTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - THTensor* other
]]

[[
  name: gt_
  return: self
  options:
    - cname: gtValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real value
    - cname: gtTensorT
      arguments:
        - THTensor* self
        - THTensor* self
        - THTensor* other
]]

[[
  name: gt
  only_stateless: True
  return: argument 0
  options:
    - cname: gtValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: gtTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
    - cname: gtValueT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: gtTensorT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
]]


[[
  name: le
  return: argument 0
  options:
    - cname: leValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - real value
    - cname: leTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - THTensor* other
]]

[[
  name: le_
  return: self
  options:
    - cname: leValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real value
    - cname: leTensorT
      arguments:
        - THTensor* self
        - THTensor* self
        - THTensor* other
]]

[[
  name: le
  only_stateless: True
  return: argument 0
  options:
    - cname: leValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: leTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
    - cname: leValueT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: leTensorT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
]]


[[
  name: ge
  return: argument 0
  options:
    - cname: geValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - real value
    - cname: geTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - THTensor* other
]]

[[
  name: ge_
  return: self
  options:
    - cname: geValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real value
    - cname: geTensorT
      arguments:
        - THTensor* self
        - THTensor* self
        - THTensor* other
]]

[[
  name: ge
  only_stateless: True
  return: argument 0
  options:
    - cname: geValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: geTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
    - cname: geValueT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: geTensorT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
]]


[[
  name: eq
  return: argument 0
  options:
    - cname: eqValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - real value
    - cname: eqTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - THTensor* other
]]

[[
  name: eq_
  return: self
  options:
    - cname: eqValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real value
    - cname: eqTensorT
      arguments:
        - THTensor* self
        - THTensor* self
        - THTensor* other
]]

[[
  name: eq
  only_stateless: True
  return: argument 0
  options:
    - cname: eqValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: eqTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
    - cname: eqValueT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: eqTensorT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
]]


[[
  name: ne
  return: argument 0
  options:
    - cname: neValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - real value
    - cname: neTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* self
        - THTensor* other
]]

[[
  name: ne_
  return: self
  options:
    - cname: neValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real value
    - cname: neTensorT
      arguments:
        - THTensor* self
        - THTensor* self
        - THTensor* other
]]

[[
  name: ne
  only_stateless: True
  return: argument 0
  options:
    - cname: neValue
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: neTensor
      arguments:
        - arg: THBoolTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
    - cname: neValueT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - real value
    - cname: neTensorT
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* tensor
        - THTensor* other
]]

[[
  name: min
  with_stateless: True
  options:
    - cname: minall
      return: real
      arguments:
        - THTensor* self
    - cname: cmin
      return: argument 0
      arguments:
      - arg: THTensor* result
        output: True
      - THTensor* self
      - THTensor* other
    - cname: min
      return: argument 0,1
      arguments:
        - arg: THTensor* min
          output: True
        - arg: THIndexTensor* min_indices
          output: True
        - THTensor* self
        - arg: int64_t dim
          wrap_dim: self
]]

[[
  name: max
  with_stateless: True
  options:
    - cname: maxall
      return: real
      arguments:
        - THTensor* self
    - cname: cmax
      return: argument 0
      arguments:
      - arg: THTensor* result
        output: True
      - THTensor* self
      - THTensor* other
    - cname: max
      return: argument 0,1
      arguments:
        - arg: THTensor* max
          output: True
        - arg: THIndexTensor* max_indices
          output: True
        - THTensor* self
        - arg: int64_t dim
          wrap_dim: self
]]

[[
  name: kthvalue
  defined_if: "!IS_CUDA"
  with_stateless: True
  return: argument 0,1
  options:
    - before_call: int64_t __last_dim = THTensor_(nDimension)(LIBRARY_STATE ((THPTensor*)$arg2)->cdata)-1;
      arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - int64_t k
        - CONSTANT __last_dim
    - arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - int64_t k
        - arg: int64_t dim
          wrap_dim: self
]]

[[
  name: mode
  with_stateless: True
  return: argument 0,1
  options:
    - before_call: int64_t __last_dim = THTensor_(nDimension)(LIBRARY_STATE ((THPTensor*)$arg2)->cdata)-1;
      arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - CONSTANT __last_dim
    - arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - arg: int64_t dim
          wrap_dim: self
]]

[[
  name: median
  defined_if: "!IS_CUDA"
  with_stateless: True
  return: argument 0,1
  options:
    - before_call: int64_t __last_dim = THTensor_(nDimension)(LIBRARY_STATE ((THPTensor*)$arg2)->cdata)-1;
      arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - CONSTANT __last_dim
    - arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - arg: int64_t dim
          wrap_dim: self
]]

[[
  name: sort
  with_stateless: True
  return: argument 0,1
  options:
    - before_call: int64_t __last_dim = THTensor_(nDimension)(LIBRARY_STATE ((THPTensor*)$arg2)->cdata)-1;
      arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - CONSTANT __last_dim
        - CONSTANT false
    - arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - arg: int64_t dim
          wrap_dim: self
        - CONSTANT false
    - arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - arg: int64_t dim
          wrap_dim: self
        - bool descending
]]

[[
  name: topk
  with_stateless: True
  return: argument 0,1
  options:
    - before_call: int64_t __last_dim = THTensor_(nDimension)(LIBRARY_STATE ((THPTensor*)$arg2)->cdata)-1;
      arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - int64_t k
        - CONSTANT __last_dim
        - CONSTANT true
        - CONSTANT true
    - arguments:
        - arg: THTensor* values
          output: True
        - arg: THIndexTensor* indices
          output: True
        - THTensor* self
        - int64_t k
        - arg: int64_t dim
          wrap_dim: self
        - arg: bool largest
          default: "true"
        - arg: bool sorted
          default: "true"
]]

[[
  name: all
  defined_if: defined(TH_REAL_IS_BYTE) || defined(THC_REAL_IS_BYTE)
  cname: logicalall
  return: bool
  arguments:
    - THTensor* self
]]

[[
  name: any
  defined_if: defined(TH_REAL_IS_BYTE) || defined(THC_REAL_IS_BYTE)
  cname: logicalany
  return: bool
  arguments:
    - THTensor* self
]]
